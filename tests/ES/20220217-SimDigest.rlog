
R Log to Extract and Analyze Table-Cell Summaries from Jim's Simulations
========================================================================
Eric Slud,        1/25/2022

> setwd("c://EricStf/CensusProj/DiffPrivacy")
> attach("bottomUp-forEric.RData")
> objects(2)
[1] "A" "R"
> dimnames(A)   ### 2x2x7x3x2x43  =  7224 elements
[[1]]
[1] "own" "rnt"

[[2]]
[1] "mal" "fem"

[[3]]
[1] "wh"   "bl"   "as"   "aian" "pac"  "oth"  "twp" 

[[4]]
[1] "0-17"  "18-62" "62p"  

[[5]]
[1] "hisp"    "nonhisp"

[[6]]
 [1] "tr1"  "tr2"  "tr3"  "tr4"  "tr5"  "tr6"  "tr7"  "tr8"  "tr9"  "tr10"
[11] "tr11" "tr12" "tr13" "tr14" "tr15" "tr16" "tr17" "tr18" "tr19" "tr20"
[21] "tr21" "tr22" "tr23" "tr24" "tr25" "tr26" "tr27" "tr28" "tr29" "tr30"
[31] "tr31" "tr32" "tr33" "tr34" "tr35" "tr36" "tr37" "tr38" "tr39" "tr40"
[41] "tr41" "tr42" "tr43"

> dim(R)
[1] 7224   12   20       ## all cells, 12 successive workload sims, 20 runs each

## All 12 runs should have the same Laplace noise added
#  sum(c(A)) = 14480, avg. pop count of 20 per cell, with lots of zeroes.
#   so assume  A  is the array of "true " cell counts
#    and   R  the arrays of sim-by-run cell estimates


> summary(c(A))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      0       0       0      20       5     467 
> summary(c(R[,1,]))
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
-419.301   -0.872    2.049   20.000    8.173  857.745 

## This is completely weird: it says that the sim1 estimates include 
#    some huge negative value(s).

> c(sum(c(R[,1,] < -100), sum(c(R[,1,] > 100))

>  c(sum(c(R[,1,] < -100)), sum(c(A > 450)), sum(c(R[,1,] > 450)))
[1]  6  4 66

> hist(c(log(1+A)))$counts   ## intervals [k/2, (k+1)/2]
 [1] 3630  834  684  442  349  272  122  130  238  142  260  103   18

> summary(c(R[,1,]-c(A)))
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
-536.3009   -2.3085   -0.0041    0.0000    2.2951  857.7455 

### How can there be cells so negative in R[,1,] ???

> apply(R < -50,2,sum)
 sim1  sim2  sim3  sim4  sim5  sim6  sim7  sim8  sim9 sim10 sim11 sim12 
    7    13     1     0     0     1     0     0     0     0     0     0 
> apply(R < -100,2,sum)
 sim1  sim2  sim3  sim4  sim5  sim6  sim7  sim8  sim9 sim10 sim11 sim12 
    6     0     0     0     0     0     0     0     0     0     0     0 

## 6 cells have value < -100  in Sim1, which is presumably just the sim with
##    iid Laplace noise added. Each 0 cell would have probability 0.5*exp(-100/b)
##    of being < -100. If 6 were the expected number we would have 
#      6 = 3630*20*0.5*exp(-100*epsilon), or epsilon= log(3630*20*0.5/6)/100 = .087
## Why are we taking epsilon so small ?

detach(); attach("topDown-forEric.RData")
## A same as before

> summary(c(R[,1,]))
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
-489.3590   -0.9254    2.0116   20.0002    8.1286  955.5997 

## Very similar. So we have a really small epsilon, b >~ 11 and 
# P(X < -100) = 0.5*exp(-9) = 6.17e-5 
# and in 3630*20 trials this would happen ~ Poisson(4.5) times ...

#------------------------------------------------------------------
# RESUME 1/27 TO EXAMINE THE P1 regression outputs with additional margins

> apply(R < -50,2,sum)
 sim1  sim2  sim3  sim4  sim5  sim6  sim7  sim8  sim9 sim10 sim11 sim12 
    7    13     1     0     0     1     0     0     0     0     0     0 

> round(apply(R[,1:6,]-c(A), 2, function(tab) summary(c(tab))),2)
           sim1    sim2   sim3   sim4   sim5   sim6
Min.    -536.30 -123.78 -62.69 -41.77 -45.01 -51.21
1st Qu.   -2.31   -2.33  -2.38  -2.54  -2.51  -2.51
Median     0.00    0.01   0.03   0.00   0.02   0.01
Mean       0.00    0.00   0.00   0.00   0.00   0.00
3rd Qu.    2.30    2.35   2.43   2.54   2.55   2.55
Max.     857.75  151.18  47.57  43.91  50.02  47.21

## This exhibit makes it seem that wherever there are (more than a few) 
#  large negative cells, there are not large discrepancies to worry about.

> apply(R < -40,2,sum)
 sim1  sim2  sim3  sim4  sim5  sim6  sim7  sim8  sim9 sim10 sim11 sim12 
    7    28     8     0     1     4     0     1     1     0     2     1 
> apply(R < -30,2,sum)
 sim1  sim2  sim3  sim4  sim5  sim6  sim7  sim8  sim9 sim10 sim11 sim12 
   18   100    63    31    19    32    23    20    22    25    27    32 
> 

> tmp = which(R < -50, arr.ind=T)
  cbind(tmp,A=A[tmp[,1]])
      dim1 dim2 dim3   A
 [1,]  488    2    1  13
 [2,] 7202    1    2 109
 [3,]  486    2    2  10
 [4,] 1659    1    3 109
 [5,] 4681    2    4  17
 [6,] 7202    1    6 109
 [7,]  828    2    6   1
 [8,] 7202    1    7 109
 [9,]  486    2    7  10
[10,] 7175    1    8 117
[11,] 1658    1    9 115
[12,] 7202    1    9 109
[13,] 5865    2   10   0
[14,]  146    2   11  19
[15,] 6686    3   12   1
[16,] 5521    2   13  13
[17,] 5354    2   14  15
[18,] 5187    2   15  18
[19,] 4226    6   15   0
[20,]  145    2   19  19
[21,] 6195    2   19  17
[22,] 5018    2   20  12

### This is very striking: a couple of the same A cells with positive entries
##     have estimated cell values having very negative values in at least two runs!
##  The cell 7202 with A entry 109 generated very negative R's 
#      in 5 separate runs: 2,3,6,7,9. I think is the "puzzler" you found.

## Cell 7202 within 7224 found as follows
> Aaux[7202]=Aaux[7202]+runif(1)*1e-5
> which(Aaux %%1 > 0, arr.ind=T)
    dim1 dim2 dim3 dim4 dim5 dim6
rnt    2    1    2    3    2   43

## This cell with A count 109, has estimated R count < -50 in 5 of the 20 runs, 
##    occurring in sim1 but no other sims

> R[7202,1,]
 [1]  117.79262 -221.45814  117.64706  115.47868  107.69223 -211.66173
 [7] -177.31590  110.13834 -205.30066  105.87385  112.03005  110.45235
[13]  107.37750   57.35031  111.20798  108.73922  111.85960  116.45103
[19]  108.17760  112.95658

> aux = which(abs(R - c(A)) > 100, arr.ind=T) ### 38 occurrences, all in sims 1,2

> hist(log(1+abs(R[,1]-c(A)), prob=T)

>  hist(sign(R[,1,]-c(A))*log(1+abs(R[,1,]-c(A))), prob=T)  
    ## so remarkably symmetric bimodal, that this cannot be accidental !

par(mfrow=c(2,2))
for(i in c(1,2,4,6))  hist(sign(R[,i,]-c(A))*log(1+abs(R[,i,]-c(A))), 
                         xlim=c(-4,4), xlab="Discrepancy", prob=T,
                         main = paste0("log(1+D) times sign, sim ",i))  
   ## The tails are not becoming thinner, and that slight thickening may 
  #       be the reason that sum(abs) or SSQ metrics actually 
  #       get a little worse with increasing sim index.

for(i in c(3,5,9,12))  hist(sign(R[,i,]-c(A))*log(1+abs(R[,i,]-c(A))), 
                         xlim=c(-4,4), xlab="Discrepancy", prob=T,
                         main = paste0("log(1+D) times sign, sim ",i))  

   ### THIS IS THE SAVED FIGURE "DiscrepancyPic1.pdf"


> round(sqrt(apply(R - c(A), 2, function(dif) mean(dif^2))),2)
 sim1  sim2  sim3  sim4  sim5  sim6  sim7  sim8  sim9 sim10 sim11 sim12 
 6.04  6.32  5.45  5.42  5.41  5.38  5.36  5.37  5.41  5.39  5.42  5.44 
     ### I am not sure if we looked at this: it seems that root-mean-squared
   ## discrepancies decrease rapidly and level off after an initial 
  #   (mysteriousd) increase between sim1 and sim2.

> round(apply(R - c(A), 2, function(dif) mean(abs(dif))),2)
 sim1  sim2  sim3  sim4  sim5  sim6  sim7  sim8  sim9 sim10 sim11 sim12 
 3.36  3.64  3.68  3.76dim  3.75  3.74  3.73  3.74  3.75  3.75  3.76  3.77 
## but for mean sbsolute discrepancy, there is pretty steady increase 
#   and leveling off except for noise. I think this must be due to the 
#   nature of the optimization: we are optimizing an expression consisting
#   of this mean absolute difference plus an additional set of terms.

#---------------------------------------------------------------------
# Compare the last set of sim-level comparisons with 
#   the same metrics for the topDown:

detach(); attach("topDown-forEric.RData")

> round(sqrt(apply(R - c(A), 2, function(dif) mean(dif^2))),2)
 sim1  sim2  sim3  sim4  sim5  sim6  sim7  sim8  sim9 sim10 sim11 sim12 
 6.61  6.39  6.38  6.38  6.31  6.21  6.15  6.21  6.02  5.71  5.72  5.40 
###  topdown behave mich better, more what we expected !!!

> round(apply(R - c(A), 2, function(dif) mean(abs(dif))),2)
 sim1  sim2  sim3  sim4  sim5  sim6  sim7  sim8  sim9 sim10 sim11 sim12 
 3.38  3.38  3.42  3.44  3.59  3.60  3.59  3.72  3.69  3.67  3.92  3.76 
## but again (for the same reason) greater workload generally implies worse
#   mean absolute discrepancy ...

##======================================================================
# Maybe overall the lack of better leveling-off behavior may be due 
#     to the large noise (or too-small epsilon).


##--------------------------------------------------------------2/16/22
# Try again with new files sent this week (Mon 2/14)
## Workspace will again be "SimDigest.RData"

> attach("bottomUp-forEric.RData")
> objects(2)
[1] "A" "R"
> dim(A)
[1]  2  2  7  3  2 43     ## product = 7224
> dim(R)
[1] 7224   11   20        ## 11 sims, 20 reps
> dimnames(A)
[[1]]
[1] "own" "rnt"

[[2]]
[1] "mal" "fem"

[[3]]
[1] "wh"   "bl"   "as"   "aian" "pac"  "oth"  "twp" 

[[4]]
[1] "0-17"  "18-62" "62p"  

[[5]]
[1] "hisp"    "nonhisp"

[[6]]
 [1] "tr1"  "tr2"  "tr3"  "tr4"  "tr5"  "tr6"  "tr7"  "tr8"  "tr9"  "tr10"
[11] "tr11" "tr12" "tr13" "tr14" "tr15" "tr16" "tr17" "tr18" "tr19" "tr20"
[21] "tr21" "tr22" "tr23" "tr24" "tr25" "tr26" "tr27" "tr28" "tr29" "tr30"
[31] "tr31" "tr32" "tr33" "tr34" "tr35" "tr36" "tr37" "tr38" "tr39" "tr40"
[41] "tr41" "tr42" "tr43"

> dimnames(R)[[1]]
 [1] "sim2"  "sim3"  "sim4"  "sim5"  "sim6"  "sim7"  "sim8"  "sim9"  "sim10"
[10] "sim11" "sim12"     ## NB omits initial sim1 with only detailed cells and no margins

> summary(c(R[,1,]))
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
-36.0800  -0.1458   1.2106  20.0006   5.6947 471.2343 
> summary(c(A))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.      ## comparison much more reasonable now.
      0       0       0      20       5     467 

### Next explore R-A differences ... THIS IS BOTTOM-UP ANALYSIS

> summary(c(R[,1,])-c(A))
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
-53.07999  -0.83033   0.00231   0.00061   0.82869  48.35743 
> hist(c(R[,1,])-c(A), nclass=50)   ## very peaked, very long-tailed

> round(apply(apply(R-c(A), 2:3, mean), 1, summary),5)
            sim2     sim3     sim4     sim5     sim6     sim7     sim8     sim9
Min.    -0.00205 -0.00205 -0.00495 -0.00075 -0.00075 -0.00099 -0.00028 -0.00026
1st Qu. -0.00028 -0.00028 -0.00265 -0.00011 -0.00015 -0.00021 -0.00019 -0.00009
Median   0.00082  0.00082 -0.00169  0.00015  0.00009  0.00001  0.00000 -0.00005
Mean     0.00061  0.00061 -0.00159  0.00021  0.00015  0.00008  0.00000  0.00003
3rd Qu.  0.00171  0.00171 -0.00056  0.00056  0.00027  0.00046  0.00018  0.00008
Max.     0.00347  0.00347  0.00176  0.00110  0.00134  0.00119  0.00041  0.00045
           sim10    sim11    sim12
Min.    -0.00037 -0.00029 -0.00044
1st Qu. -0.00007 -0.00007 -0.00017
Median   0.00005  0.00002 -0.00004
Mean     0.00006  0.00003 -0.00004
3rd Qu.  0.00022  0.00015  0.00006
Max.     0.00057  0.00029  0.00040

## This is an interesting table: not that we are looking at means across simulations at this point, not yet assessing variability. The anomaly is what happens at sim4, in which the upper and lower tails (of the means across simulations) are both pulled sharply to the left at sim4. Then at sim8 and beyond, both tails are pulled in. These errors plus and minus are both very small!

## The next table gives summaries of the standard deviations across 7224 cells, not what we typically look at. But that is extremely stable and hardly comes down. 

## The small size of these numbers says we may have epsilon too large ?!

> round(apply(apply(R-c(A), 2:3, sd), 1, summary),3)
         sim2  sim3  sim4  sim5  sim6  sim7  sim8  sim9 sim10 sim11 sim12
Min.    2.019 1.911 1.883 1.870 1.876 1.896 1.894 1.885 1.917 1.888 1.895
1st Qu. 2.155 1.947 1.922 1.929 1.915 1.925 1.906 1.920 1.929 1.915 1.926
Median  2.253 1.963 1.933 1.959 1.929 1.936 1.927 1.935 1.950 1.942 1.942
Mean    2.237 1.962 1.941 1.957 1.932 1.940 1.926 1.936 1.946 1.939 1.944
3rd Qu. 2.281 1.975 1.966 1.984 1.941 1.953 1.944 1.952 1.960 1.955 1.968
Max.    2.432 2.018 1.990 2.012 2.016 1.988 1.971 1.998 1.973 1.996 2.009

> boxplot(t(apply(R-c(A), 2:3, sd)))  ## very rapid settling down: 
                  # the trend seems to be pure noise from sim6 on

## another view: take sd's only across runs, and then make boxplots of those by sim

> round(apply(apply(R-c(A), 1:2, sd), 2, summary),3)
          sim2  sim3  sim4  sim5  sim6  sim7  sim8  sim9 sim10 sim11 sim12
Min.     0.455 0.455 0.665 0.696 0.623 0.666 0.716 0.511 0.455 0.589 0.731
1st Qu.  1.366 1.432 1.522 1.529 1.520 1.524 1.515 1.520 1.528 1.522 1.521
Median   1.617 1.737 1.814 1.827 1.814 1.816 1.806 1.810 1.823 1.819 1.828
Mean     1.869 1.822 1.873 1.888 1.869 1.876 1.862 1.871 1.882 1.875 1.879
3rd Qu.  1.959 2.113 2.156 2.177 2.159 2.174 2.150 2.161 2.165 2.161 2.172
Max.    13.200 5.128 4.757 4.936 4.399 4.749 4.258 5.059 4.518 4.554 5.329

> boxplot(apply(R-c(A), 1:2, sd)) ## These are something like the boxplots 
   ## we produced before; but the overall sd numbers are small now!
   ## and remarkably, only the upper tail comes down, and for these bottom-up sims
   ## the settling-down seems to occur somewhere in the range sim4 to sim6.

## we need a different view to look at marginals
## Here is a little function to do it.

> margView = function(margnums, r, a, opt="c") {
     ## margnums is a subset of the 1:6 marginals:
    ## then we use "apply" to collect those marginals and take SD's
    ## if opt="c" SDs are taken across cells; if opt="r", across runs
     aux = array(R-c(A), c(dim(A),dim(R)[2:3]))
     tmptab = apply(aux, c(margnums, length(dim(A))+(1:2)),sum)
     ndim = length(margnums)+2
     if(opt=="c")  {
          boxplot(t(apply(tmptab,c(ndim-1,ndim),sd))) 
     } else {
          tmptab2 = array(tmptab, c(prod(dim(A)[margnums]),
             dim(R)[2:3]))
          boxplot(apply(tmptab2, 1:2, sd)) }
     }

### Still testing this ...

> margView(1:2,R,A,"c")
> margView(1:2,R,A,"r")
> margView(c(1,6),R,A,"r")


### Still need to process the top-down ... THISD IS WHERE WE LEFT IT THIS MORNING


