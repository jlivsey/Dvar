
CONTINGENCY TABLE CODiNG                                            Eric Slud, 10/24
======================================================================================

Programming Steps and Code Related to Meeting Notes with James Livsey 10/23/2020

## In this segment, J is a list of tuples subsets (containing distinct elements) of 1:K, 
##   ASSUME (can check later if desired) that entries of J are ordered 
##        nondecreasing by length and lexicographically within vectors of given length

## First function generates list of all subtuples of an input vector of distinct (assumed ordered) elts

> all_subtuples = function(v) {
         A = NULL
         for(j in 1:(length(v)-1)) 
             A = c(A, as.list(data.frame(combn(v,j))))
         A }

> Aexmp1 = all_subtuples(1:4)

>  Algth = split(1:length(Aexmp1), sapply(Aexmp1,length))

> Algth                    ### tells which list components have respective lengths
$`1`
[1] 1 2 3 4

$`2`
[1]  5  6  7  8  9 10

$`3`
[1] 11 12 13 14

### Now try to check whether list J (ordered by increasing length)
###  has property that all sub-tuples are also in list J

### For this, suffices to check that for all components of  J, of length k,
###   all subtuples of length k-1 occur earlier

> J = list(1,2,3,4,5,6,c(2,4),c(2,6),c(3,6),c(1,2,3))
> Jlgth = split(1:length(J), sapply(J,length))
> Jlgth
$`1`
[1] 1 2 3 4 5 6

$`2`
[1] 7 8 9

$`3`
[1] 10

## look at  k  , find for each k-tuple the set of all (k-1)-subtuples

#### IDEA of hash-coding:
### start with list, assumed in increasing order of vector-length

### generate as many uniforms as largest index

LJ = sapply(J, length)
UJ = runif(max(unlist(J)))

> J2 =unlist(lapply(J, function(vec) sum(UJ[vec])))
> J2
 [1] 0.2918126 0.5077309 0.3765409 0.4174777 0.3800357 0.7243465 0.9252087 1.2320775 1.1008875 1.1760845


### This is the hash-coded set of tuples in the list
### Now create a vector of the hash-coded (k-1)-tuples of all k-tuples in J

newhash = function(k) {   ### apply only for k>1
       out = NULL
       for(j in Jlgth[[k]]) 
             out=c(out, apply(combn(J[[j]],k-1),2, function(col) sum(UJ[col])))
       out  }

> newhash(2)
[1] 0.5077309 0.4174777 0.5077309 0.7243465 0.3765409 0.7243465  ### all in J2

>  newhash(3)
[1] 0.7995436 0.6683535 0.8842718    ### none in J2


## MATERIAL ADDED 10/24/2020 FF
==========================

### The steps above are embodied in the following complete package function.

## In this segment, J is a list of tuples subsets (containing distinct elements) of 1:K, 
##   ASSUME (can check later if desired) that entries of J are ordered 
##        nondecreasing by length and lexicographically within vectors of given length

> Jcheck = function(Jlist) {  ### apply only if max(sapply(Jlist,length)) > 1
       lj = sapply(Jlist, length)
       lmax = max(lj)
       jbylgth = split(1:length(Jlist), lj)
       lgths = 
          ### splits the indices components of Jlist by length of their tuples
       uj = runif(max(unlist(Jlist)))     ### RANDOM #s for hash-coding
       jhash = sapply(Jlist, function(vec) sum(uj[vec]))
     ### next for each k > 1 in set of lengths lj, create a vector of the 
     ###    hash-coded (k-1)-tuples of all k-tuples in J
     ### and check if there are some not in the hash-codes jhash[jbylgth[[k-1]]]
       Jvalid=TRUE
       if(lmax>1) for (k in setdiff(as.numeric(names(jbylgth)),1)) {
            oldhash = jhash[jbylgth[[as.character(k-1)]]]
            tmphash = NULL
            for ( i in jbylgth[[as.character(k)]] )
                tmphash = c(tmphash, apply(combn(Jlist[[i]],k-1),2,
                             function(vec) sum(uj[vec])))
            if( sum(is.na(match(tmphash, oldhash))) > 0 ) {
                Jvalid=FALSE
                return(list( Jvalid = Jvalid, kvalue = k )) }
        }
        Jvalid }

### See J above

>  Jcheck(J[1:9])
[1] TRUE
>  Jcheck(J)
$Jvalid
[1] FALSE

$kvalue
[1] 3

> Jalt = list(1,3,5,6,7,1:2,3:4,c(1,3,6,7))
  Jcheck(Jalt)
$Jvalid
[1] FALSE

$kvalue
[1] 2

> Jalt2 = c(Jalt, list(2,4))
> split(1:length(Jalt2), sapply(Jalt2,length))
$`1`
[1]  1  2  3  4  5  9 10

$`2`
[1] 6 7

$`4`
[1] 8

> Jcheck(Jalt2)
$Jvalid
[1] FALSE

$kvalue
[1] 4

> Jcheck(c(Jalt2,list(c(1,3,6))))
$Jvalid
[1] FALSE

$kvalue
[1] 3
                ### Function seems to work OK

#--------------------------------------------------------------------------------
## Next steps: development of a function 
## to fill in the array components in an A list of arrays with 
## dimensions indexed as and determine by a J list as above.        10/24/2020

## Now create function to fill in a multiway array satisfying side conditions 
##    that all marginal sums are 0 starting from array in which 
##    the last level of all dimensional initially have elts NA.

# Input: array  A with dimensions  I1, I2, ..., IK with numerical entries 
##    in sub-array 1:(I1-1),...,1:(IK-1) and NA elements elsewhere

# We code the inductive step of filling in NA elements.

Afill.Step = function(Atmp, dim1) {
      ###  Atmp  is multiway array, with dim I(1)x...xI(K)
      ###     d= dim1 is the dimension in which NA elements are to be filled in
      ### Assume Atmp[1:I1,...,1:I(d-1),1:(I(d)-1),...,1:(I(K)-1)] is 
    ##         initially filled in with numbers, and all other entries are NA
    ## Output will be Anew, dim1+1 with Anew having elements 
    ###      Atmp[1:I1,...,1:I(d-1),I(d),...,1:(I(K)-1)] filled in but all other 
    ###      exactly the same as those of Atmp
       Idim = dim(Atmp)    ## all entries > 1
       nd = length(Idim)
       K = Idim[nd]
       Anew = Atmp       
       expr0.ch = c("Anew[",rep(",", dim1-1))
       expr1.ch = NULL
       if(dim1<nd) 
             for(i in (dim1+1):nd) expr1.ch = c(expr1.ch,", 1:",Idim[i]-1) 
       NAfill.nam = paste( c(expr0.ch, Idim[dim1], expr1.ch, 
             "]"), collapse="")
       FillArr.nam = paste( c(expr0.ch, "1:", 
             Idim[dim1]-1, expr1.ch, ", drop=F]"), collapse="")
       eval( str2expression( paste( NAfill.nam, "<- apply(", FillArr.nam, 
             ", setdiff(1:nd,",dim1, 
             "), function(arr) -sum(arr))", collapse="")))         
       list(Anew=Anew, dim.new=dim1+1, nam1=NAfill.nam, nam2=FillArr.nam)
       }

> Atmp0 = array(c(1,NA,1,NA,NA,NA), c(2,3))
> Atmp0
     [,1] [,2] [,3]
[1,]    1    1   NA
[2,]   NA   NA   NA

> tmp = Afill.Step(Atmp0,1)
> tmp
$Anew
     [,1] [,2] [,3]
[1,]    1    1   NA
[2,]   -1   -1   NA

$dim.new
[1] 2

$nam1
[1] "Anew[2, 1:2]"

$nam2
[1] "Anew[1:1, 1:2, drop=F]"

> Afill.Step(tmp$Anew,2)[1:2]
$Anew
     [,1] [,2] [,3]
[1,]    1    1   -2
[2,]   -1   -1    2

$dim.new
[1] 3


> Atmp1 = array(runif(60),c(3,4,5))    
  Atmp1[,,5] = NA; Atmp1[,4,] = NA; Atmp1[3,,]=NA

  Anew = Atmp1
  for(j in 1:3) Anew = Afill.Step(Anew,j)$Anew

> apply(Anew,1:2,sum)
     [,1] [,2] [,3] [,4]
[1,]    0    0    0    0
[2,]    0    0    0    0
[3,]    0    0    0    0
> apply(Anew,c(1,3),sum)
     [,1] [,2] [,3] [,4] [,5]
[1,]    0    0    0    0    0
[2,]    0    0    0    0    0
[3,]    0    0    0    0    0
> apply(Anew,2:3,sum)
     [,1] [,2] [,3] [,4] [,5]
[1,]    0    0    0    0    0
[2,]    0    0    0    0    0
[3,]    0    0    0    0    0
[4,]    0    0    0    0    0



